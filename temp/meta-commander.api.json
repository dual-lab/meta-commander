{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.12.1",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "@dual-lab/meta-commander!",
  "docComment": "/**\n * A library for building commader program using static decorators. The program's instance is built using the configuration defined into the meta decorators (\\@MetaCommand, \\@MetaOption ...).\n *\n * @remarks\n *\n * Before use this decorators you need to import into your main files reflect-metadata npm module. Commnder is used with a no conflit option, so to get all the options you nneed to call the method opts() on the Commnad instance. And the action recive only the options not the command instance. See [avoiding option name clashes](https://github.com/tj/commander.js#avoiding-option-name-clashes)\n *\n * @example\n * ```typescript\n * import 'reflect-metadata';\n * import {CommandMeta, OptionMeta, program} from '../src/mod';\n *\n *\n * @CommandMeta('1.0.0')\n * class Proposal1 {\n *   @OptionMeta({})\n *   debug?: boolean;\n * }\n *\n * program(Proposal1).parseAsync(process.argv);\n * ```\n *\n * @packageDocumentation\n */\n",
  "name": "@dual-lab/meta-commander",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@dual-lab/meta-commander!",
      "name": "",
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@dual-lab/meta-commander!ActionHandler:function(1)",
          "docComment": "/**\n * Annotate the method that would handler the sub command action\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function ActionHandler(proto: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", descriptor: "
            },
            {
              "kind": "Reference",
              "text": "PropertyDescriptor",
              "canonicalReference": "!PropertyDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Beta",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "proto",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "descriptor",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "ActionHandler"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dual-lab/meta-commander!CommandConfig:interface",
          "docComment": "/**\n * Command config object, used when defineing sub command\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CommandConfig "
            }
          ],
          "releaseTag": "Beta",
          "name": "CommandConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dual-lab/meta-commander!CommandConfig#description:member",
              "docComment": "/**\n * Command description\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "description?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Beta",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dual-lab/meta-commander!CommandConfig#name:member",
              "docComment": "/**\n * Command name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Beta",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dual-lab/meta-commander!CommandConfig#version:member",
              "docComment": "/**\n * Command version\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "version?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Beta",
              "name": "version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dual-lab/meta-commander!CommandConfig#withValue:member",
              "docComment": "/**\n * Command with values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withValue?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        optional?: boolean;\n        descName?: string;\n        vardiac?: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Beta",
              "name": "withValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@dual-lab/meta-commander!CommandMeta:function(1)",
          "docComment": "/**\n * Commad decorator used on the class that rappresent the main program or class that rappresent sub command.\n *\n * @param config - the command config {@link CommandConfig}\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function CommandMeta<T extends "
            },
            {
              "kind": "Reference",
              "text": "Ctor",
              "canonicalReference": "@dual-lab/meta-commander!Ctor:type"
            },
            {
              "kind": "Content",
              "text": "<{}>"
            },
            {
              "kind": "Content",
              "text": ">(config: "
            },
            {
              "kind": "Reference",
              "text": "CommandConfig",
              "canonicalReference": "@dual-lab/meta-commander!CommandConfig:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(ctor: T) => T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Beta",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "CommandMeta"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dual-lab/meta-commander!Ctor:type",
          "docComment": "/**\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Ctor<T> = "
            },
            {
              "kind": "Content",
              "text": "new (...args: any[]) => T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Beta",
          "name": "Ctor",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dual-lab/meta-commander!OptionConfig:interface",
          "docComment": "/**\n * Meta option decorator configuration object.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface OptionConfig "
            }
          ],
          "releaseTag": "Beta",
          "name": "OptionConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dual-lab/meta-commander!OptionConfig#description:member",
              "docComment": "/**\n * Description of the option will be priinted into the help message\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "description?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Beta",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dual-lab/meta-commander!OptionConfig#longName:member",
              "docComment": "/**\n * The long option name. If camel case it will be trasformed into kebabe case. If not specified it will be inferred from the name of the field or method. To suppress long name put equal to `false`.\n *\n * @remarks\n *\n * Can be suppressed only if the `shortName` is not\n *\n * @example\n * ```typescript\n *\n * @MetaCommand\n * class MyCli {\n *  @MetaOption({\n *    shortName: 'd'\n *    longName: 'debugEnabled'\n *  })\n *  debug?: boolean;\n * }\n *\n * ```\n *\n * @example\n * ```bash\n * my-cli --debug-enabled\n *\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "longName?: "
                },
                {
                  "kind": "Content",
                  "text": "string | false"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Beta",
              "name": "longName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dual-lab/meta-commander!OptionConfig#processing:member",
              "docComment": "/**\n * The preceseing opton args' function. see (https://github.com/tj/commander.js#custom-option-processing)\n *\n * @remarks\n *\n * If the {@link OptionMeta | \\@OptionMeta} is used on a method. That method will be the processing function.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "processing?: "
                },
                {
                  "kind": "Content",
                  "text": "(dummyValue: string, previusValue?: string) => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Beta",
              "name": "processing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dual-lab/meta-commander!OptionConfig#required:member",
              "docComment": "/**\n * The option is required. Default is not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "required?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Beta",
              "name": "required",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dual-lab/meta-commander!OptionConfig#shortName:member",
              "docComment": "/**\n * The short option character. if not specified it will be inferred from the first letter of field or method name. To suppress short name put equal to `false`\n *\n * @remarks\n *\n * Can be suppressed only if the `longName` is not.\n *\n * @example\n * ```typescript\n *\n * @MetaCommand\n * class MyCli {\n *  @MetaOption({\n *    shortName: 'd'\n *  })\n *  debug?: boolean;\n * }\n *\n * ```\n *\n * @example\n * ```bash\n * my-cli -d\n *\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shortName?: "
                },
                {
                  "kind": "Content",
                  "text": "string | false"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Beta",
              "name": "shortName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dual-lab/meta-commander!OptionConfig#withValue:member",
              "docComment": "/**\n * Configuration for option that take a value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withValue?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        defaultValue?: any;\n        descName?: string;\n        optional?: boolean;\n        vardiac?: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Beta",
              "name": "withValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@dual-lab/meta-commander!OptionMeta:function(1)",
          "docComment": "/**\n * Meta option decorator used to configure option command. This can be put on filed or class methods. If put on class methods this one will be used as the option processor.\n *\n * @remarks\n *\n * - When used on class method `this` will no longer refer to the instance. - When used on class fields the name fileds will be used as the short or long name, if those are not specified inside the configuration object. If the field is of array type then is the option accept and argumente this will be default vardiac.\n *\n * @param config - Configuration object {@link OptionConfig}\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function OptionMeta(config: "
            },
            {
              "kind": "Reference",
              "text": "OptionConfig",
              "canonicalReference": "@dual-lab/meta-commander!OptionConfig:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(proto: any, key: string, descriptor?: "
            },
            {
              "kind": "Reference",
              "text": "PropertyDescriptor",
              "canonicalReference": "!PropertyDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Beta",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "OptionMeta"
        },
        {
          "kind": "Function",
          "canonicalReference": "@dual-lab/meta-commander!program:function(1)",
          "docComment": "/**\n * Create and retrive the commander instance.\n *\n * @param metaIstance - Constructor function\n *\n * @returns Commander instance\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function program<T>(metaIstance: "
            },
            {
              "kind": "Reference",
              "text": "Ctor",
              "canonicalReference": "@dual-lab/meta-commander!Ctor:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Command",
              "canonicalReference": "commander!~commander.CommanderStatic#Command:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Beta",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "metaIstance",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "program"
        },
        {
          "kind": "Function",
          "canonicalReference": "@dual-lab/meta-commander!SubCommandMeta:function(1)",
          "docComment": "/**\n * Sub command decorator used on filed of type a class decorated with the Command decorator.\n *\n * @param isDefault - If this sub commond is the dafault one\n *\n * @param hidden - if this command shuold be hidden from help message\n *\n * @example\n * ```typescript\n * @CommandMeta({\n *   name: 'brew',\n *   description: 'Brew a cup of coffe',\n *   withValue: {\n *     vardiac: false,\n *     descName: 'coffeType',\n *     optional: false\n *   }\n * })\n * class Brew {\n *   @OptionMeta({\n *     description: 'Enable debug mode',\n *     shortName: 'd',\n *     longName: 'debug'\n *   })\n *   debug?: boolean;\n *\n *   @ActionHandler\n *   brewCoffe(args, options){\n *    // TO something special :-D\n *   }\n * }\n *\n * @CommandMeta({\n *   version: '1.0.0',\n *   name: 'my-cli'\n * })\n * class MyCli {\n *  @SubCommandMeta()\n *  brew?: Brew;\n * }\n * ```\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function SubCommandMeta(isDefault?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", hidden?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(proto: any, key: string, description?: "
            },
            {
              "kind": "Reference",
              "text": "PropertyDescriptor",
              "canonicalReference": "!PropertyDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          },
          "releaseTag": "Beta",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "isDefault",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "hidden",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "SubCommandMeta"
        }
      ]
    }
  ]
}
